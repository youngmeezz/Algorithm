//깊이 우선 탐색은 너비우선 탐색과 마찬가지로 맹목적으로 각 노드 탐색할떄 주로 사용됩니다.
//너비 우선 탐색에서는 Queue가 사용 되었다면
//깊이 우선 탐색에서는 Stack을 사용하면 됩니다.
//더불어 스택을 사용하지 않아도 구현이 가능하다는 특징이 있습니다.
//컴퓨터 구조는 항상 스택의 원리를 사용하기 떄문입니다.
//컴퓨터 자체가 스택프레임이라고 해서 스택 원리가 사용되기 떄문에 스택 이용하지않고 재귀함수만으로도 깊이우선 탐색이 가능하다.

//재귀함수를 쓰는 이유는 stack이라는 컴퓨터 구조 처럼 쓰고 넣고를 반복하는 구조이기떄문에 사용하면 좋다.
#include<iostream>
#include<vector>

using namespace std;

//노드의 갯수는 7개
int number = 7;
//방문처리를 위해 check배열7개
int c[7];
//vector에는 총 index 8만큼 배열의 크기를 만들어주어서
vector<int> a[8];

//총 7개의 노드가 각각 인접한 노드를 가질수 있도록 만들어 주었다.
void dfs(int x){
    if(c[x]) return; //현재 그 노드를 방문했다면 이렇게 return해줘서 바로 함수를 끝낼 수 있도록 해준다.
    c[x] = true;//그 노드를 처음 방문하는 거라면 이렇게 방문 처리를 해주면 된다.
    cout << x << ' '; //이제 그 노드를 출력할 수 있게 해주면 된다.
    //인접 노드를 하나씩 방문을 하면서 
    for(int i=0;i<a[x].size();i++){
        //인접 노드를 대상으로 해서 dfs를 수행하면 된다.
        int y = a[x][i];
        dfs(y); //계속해서 자기와 인접한 노드를 반복한다.dfs를 수행하면서 깊이우선탐색을 안정적을 사용하게 됨.
    }
}
//DFS는 다음과 같은 간단한 알고리즘에 따라서 작동 합니다.
/*
1. 스택의 최상단 노드를 확인합니다.(가장 마지막에 들어온 노드)
2. 최상단 노드에게 방문하지 않은 인접 노드가 있으면 그 노드를 스택에 넣고 방문처리 합니다.
3. 방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 뻅니다.
인접 노드 중에서 가장 작은 (낮은) 숫자가 있는 노드로 작성
*/
//차곡차곡쌓이는 스택프레임이랑 같은 원리이기떄문에 넣고 뺴고가 같은 의미
/*
void dfs(int x){
    if(c[x]) return;
    c[x] = true;
    cout << x << ' ';
    for(int i=0;i<a[x].size();i++){
        int y = a[x][i];
        dfs(y);
    }
}
*/
int main(void){
    a[1].push_back(2);
    a[2].push_back(1);

    a[1].push_back(3);
    a[3].push_back(1);

    a[2].push_back(3);
    a[3].push_back(2);

    a[2].push_back(4);
    a[4].push_back(2);
    
    a[2].push_back(5);
    a[5].push_back(2);

    a[3].push_back(6);
    a[6].push_back(3);

    a[3].push_back(7);
    a[7].push_back(3);

    a[4].push_back(5);
    a[5].push_back(4);

    a[6].push_back(7);
    a[7].push_back(6);
    
    dfs(1);
//삿포로,일본계획,
    return 0;
}
//이 dfs를 가지고 그래프 알고리즘을 활용할 수 있다
//이 자체로는 큰 의미가 없고 DFS를 활용해서 문제를 해결하고자 하는 것에 주안점이 두어져 있다.
//작동 원리만 빠삭하게 알아두자
//또한 스택을 직접 사용하지 않고 재귀함수를 이용해 간략하게 함수를 구현할 수 있따.
//스택에서 꺼낸 순서는  1,2,3,6,7,4,5이다.(3,6,7)먼저 돌고 (2,4,5)나중에 돈다.